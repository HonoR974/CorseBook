{"ast":null,"code":"var AWS = require('../core');\n\nvar v4Credentials = require('../signers/v4_credentials');\n\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\n\nvar s3util = require('./s3util');\n\nvar regionUtil = require('../region_config'); // Pull in managed upload extension\n\n\nrequire('../s3/managed_upload');\n/**\n * @api private\n */\n\n\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n/**\n * @api private\n */\n\nvar regionRedirectErrorCodes = ['AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n'BadRequest', // head operations on virtual-hosted global bucket endpoints\n'PermanentRedirect', // non-head operations on path-style or regional endpoints\n301 // head operations on path-style or regional endpoints\n];\nvar OBJECT_LAMBDA_SERVICE = 's3-object-lambda';\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) If not using presigned urls, default to V4\n        b) If using presigned urls, default to lowest version the region supports\n    */\n\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSigningName: function getSigningName(req) {\n    if (req && req.operation === 'writeGetObjectResponse') {\n      return OBJECT_LAMBDA_SERVICE;\n    }\n\n    var _super = AWS.Service.prototype.getSigningName;\n    return req && req._parsedArn && req._parsedArn.service ? req._parsedArn.service : _super.call(this);\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = []; // default to us-east-1 when no region is provided\n\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' + '`s3BucketEndpoint` to true.');\n    }\n\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n\n    if (msg) {\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n    request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', this.extractErrorFrom200Response);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n\n    if (this.shouldDisableBodySigning(request)) {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    } //deal with ARNs supplied to Bucket\n\n\n    if (request.operation !== 'createBucket' && s3util.isArnInParam(request, 'Bucket')) {\n      // avoid duplicate parsing in the future\n      request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);\n      request.removeListener('validate', this.validateBucketName);\n      request.removeListener('build', this.populateURI);\n\n      if (request._parsedArn.service === 's3') {\n        request.addListener('validate', s3util.validateS3AccessPointArn);\n        request.addListener('validate', this.validateArnResourceType);\n        request.addListener('validate', this.validateArnRegion);\n      } else if (request._parsedArn.service === 's3-outposts') {\n        request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n        request.addListener('validate', s3util.validateOutpostsArn);\n        request.addListener('validate', s3util.validateArnRegion);\n      }\n\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateUriFromAccessPointArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n      return;\n    } //listeners regarding region inference\n\n\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function (req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' + 'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function (req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, {\n      allowFipsEndpoint: true\n    });\n  },\n\n  /**\n   * Validate resource-type supplied in S3 ARN\n   */\n  validateArnResourceType: function validateArnResourceType(req) {\n    var resource = req._parsedArn.resource;\n\n    if (resource.indexOf('accesspoint:') !== 0 && resource.indexOf('accesspoint/') !== 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params); // Need to include trailing slash to match sigv2 behavior\n\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(), {\n          code: 'InvalidBucket',\n          message: msg\n        });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = ['createBucket', 'deleteBucket', 'listBuckets'];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\n   * 's3.us-east-1.amazonaws.com'.\n   * @api private\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n\n    if (!(service._originalConfig || {}).endpoint && req.httpRequest.region === 'us-east-1' && config.s3UsEast1RegionalEndpoint === 'regional' && req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      regionalEndpoint = config.endpoint.substring(0, insertPoint) + '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstackEndpoint) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname = b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' + endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * When user supply an access point ARN in the Bucket parameter, we need to\n   * populate the URI according to the ARN.\n   */\n  populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {\n    var accessPointArn = req._parsedArn;\n    var isOutpostArn = accessPointArn.service === 's3-outposts';\n    var isObjectLambdaArn = accessPointArn.service === 's3-object-lambda';\n    var outpostsSuffix = isOutpostArn ? '.' + accessPointArn.outpostId : '';\n    var serviceName = isOutpostArn ? 's3-outposts' : 's3-accesspoint';\n    var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? '-fips' : '';\n    var dualStackSuffix = !isOutpostArn && req.service.config.useDualstackEndpoint ? '.dualstack' : '';\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    endpoint.hostname = [accessPointArn.accessPoint + '-' + accessPointArn.accountId + outpostsSuffix, serviceName + fipsSuffix + dualStackSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n\n    if (isObjectLambdaArn) {\n      // should be in the format: \"accesspoint/${accesspointName}\"\n      var serviceName = 's3-object-lambda';\n      var accesspointName = accessPointArn.resource.split('/')[1];\n      var fipsSuffix = req.service.config.useFipsEndpoint ? '-fips' : '';\n      endpoint.hostname = [accesspointName + '-' + accessPointArn.accountId, serviceName + fipsSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n    }\n\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path; //remove the Bucket value from path\n\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) {\n      // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function (_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] = contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request if it's not\n   * already set by {AWS.EventListeners.Core.COMPUTE_CHECKSUM}. It depends on\n   * whether {AWS.Config.computeChecksums} is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    var rules = req.service.api.operations[req.operation].input.members;\n    var body = req.httpRequest.body;\n    var needsContentMD5 = rules.ContentMD5 && !req.params.ContentMD5 && body && (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === 'string'); // Sha256 signing disabled, and not a presigned url\n\n    if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {\n      return true;\n    } // SigV2 and presign, for backwards compatibility purpose.\n\n\n    if (needsContentMD5 && this.getSignatureVersion(req) === 's3' && req.isPresigned()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * This listener is to support S3-specific features like\n   * s3DisableBodySigning and SigV2 presign. Content MD5 logic for SigV4 is\n   * handled in AWS.EventListeners.Core.COMPUTE_CHECKSUM\n   *\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function (key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (s3util.dnsCompatibleBucketName(bucketName)) {\n      return this.config.sslEnabled && bucketName.match(/\\./) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * For COPY operations, some can be error even with status code 200.\n   * SDK treats the response as exception when response body indicates\n   * an exception or body is empty.\n   *\n   * @api private\n   */\n  extractErrorFrom200Response: function extractErrorFrom200Response(resp) {\n    if (!operationsWith200StatusCodeError[resp.request.operation]) return;\n    var httpResponse = resp.httpResponse;\n\n    if (httpResponse.body && httpResponse.body.toString().match('<Error>')) {\n      // Response body with '<Error>...</Error>' indicates an exception.\n      // Get S3 client object. In ManagedUpload, this.service refers to\n      // S3 client object.\n      resp.data = null;\n      var service = this.service ? this.service : this;\n      service.extractError(resp);\n      throw resp.error;\n    } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\\w_]/)) {\n      // When body is empty or incomplete, S3 might stop the request on detecting client\n      // side aborting the request.\n      resp.data = null;\n      throw AWS.util.error(new Error(), {\n        code: 'InternalError',\n        message: 'S3 aborted request'\n      });\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n    httpRequest.endpoint = new AWS.S3(newConfig).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n\n    var bucket = req.params.Bucket || null;\n\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n\n      if (region) {\n        if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n          req.service.bucketRegionCache[bucket] = region;\n        }\n      }\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' || AWS.util.isNode() && req.operation === 'headBucket' || error.statusCode === 400 && req.operation !== 'headObject' || regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {\n      Bucket: bucket\n    };\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function () {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n  /**\n  * For browser only. If NetworkingError received, will attempt to obtain\n  * the bucket region.\n  *\n  * @api private\n  */\n  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n\n    if (!error || error.code !== 'NetworkingError' || !bucket || request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!s3util.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({\n        Bucket: bucket,\n        MaxKeys: 0\n      });\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n      getRegionReq.send(function () {\n        var region = service.bucketRegionCache[bucket] || null;\n\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n  },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n  bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n  clearBucketRegionCache: function (buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n\n    return bucketRegionCache;\n  },\n\n  /**\n   * Corrects request region if bucket's cached region is different\n   *\n   * @api private\n   */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidParameterException',\n        message: 'The expiration must be a number, received ' + typeof expires\n      });\n    }\n\n    delete params.Expires; // we can't validate this\n\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function () {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * @!method  getSignedUrlPromise()\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\n   *   for a given operation name.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @note Not all operation parameters are supported when using pre-signed\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *      request. If you are using pre-signed URLs to upload from a browser and\n   *      need to use these fields, see {createPresignedPost}.\n   *   @param operation [String] the name of the operation to call\n   *   @param params [map] parameters to pass to the operation. See the given\n   *      operation for the expected operation parameters. In addition, you can\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *      work for.\n   *   @option params Expires [Integer] (900) the number of seconds to expire\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\n   *   @callback fulfilledCallback function(url)\n   *     Called if the promise is fulfilled.\n   *     @param url [String] the signed url\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Pre-signing a getObject operation\n   *      var params = {Bucket: 'bucket', Key: 'key'};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Pre-signing a putObject operation with a specific payload\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   */\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n        self = this,\n        config = this.config,\n        endpoint = AWS.util.copy(this.endpoint);\n\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          try {\n            callback(null, finalizePost());\n          } catch (err) {\n            callback(err);\n          }\n        }\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {\n    var now = this.getSkewCorrectedDate();\n\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,' + ' region, and credentials');\n    }\n\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1000), conditions);\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true), fields.Policy, 'hex');\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers; // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {\n        code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'\n      });\n    }\n  },\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n\n    var hostname = this.endpoint.hostname; // copy params so that appending keys does not unintentioinallly\n    // mutate params object argument passed in by user\n\n    var copiedParams = AWS.util.copy(params);\n\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      copiedParams.CreateBucketConfiguration = {\n        LocationConstraint: this.config.region\n      };\n    }\n\n    return this.makeRequest('createBucket', copiedParams, callback);\n  },\n  writeGetObjectResponse: function writeGetObjectResponse(params, callback) {\n    var request = this.makeRequest('writeGetObjectResponse', AWS.util.copy(params), callback);\n    var hostname = this.endpoint.hostname;\n\n    if (hostname.indexOf(this.config.region) !== -1) {\n      // hostname specifies a region already\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.');\n    } else {\n      // Hostname doesn't have a region.\n      // Object Lambda requires an explicit region.\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.' + this.config.region + '.');\n    }\n\n    request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);\n    return request;\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {\n      service: this,\n      params: params\n    });\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n/**\n * @api private\n */\n\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n/**\n * @api private\n */\n\n\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\n\nAWS.util.addPromises(AWS.S3);","map":{"version":3,"sources":["D:/WorkSpace/DepotGithub/P12/P12/angular/node_modules/aws-sdk/lib/services/s3.js"],"names":["AWS","require","v4Credentials","resolveRegionalEndpointsFlag","s3util","regionUtil","operationsWith200StatusCodeError","regionRedirectErrorCodes","OBJECT_LAMBDA_SERVICE","util","update","S3","prototype","getSignatureVersion","request","defaultApiVersion","api","signatureVersion","userDefinedVersion","_originalConfig","regionDefinedVersion","config","isPresigned","getSigningName","req","operation","_super","Service","_parsedArn","service","call","getSignerClass","Signers","RequestSigner","getVersion","validateService","msg","messages","region","endpoint","s3BucketEndpoint","push","length","join","error","Error","name","message","shouldDisableBodySigning","signerClass","s3DisableBodySigning","V4","httpRequest","protocol","setupRequestListeners","prependListener","addListener","validateScheme","validateBucketName","optInUsEast1RegionalEndpoint","removeListener","EventListeners","Core","VALIDATE_REGION","addContentType","computeContentMd5","computeSseCustomerKeyMd5","populateURI","addExpect100Continue","extractError","hoistPayloadMember","extractData","extractErrorFrom200Response","prepareSignedUrl","COMPUTE_SHA256","disableBodySigning","isArnInParam","ARN","parse","params","Bucket","validateS3AccessPointArn","validateArnResourceType","validateArnRegion","validateOutpostsAccessPointArn","validateOutpostsArn","validateArnAccount","validateArnService","populateUriFromAccessPointArn","validatePopulateUriFromArn","validateBucketEndpoint","correctBucketRegionFromCache","onAsync","requestBucketRegion","isBrowser","reqRegionForNetworkingError","scheme","sensitive","SSECustomerKey","CopySourceSSECustomerKey","code","allowFipsEndpoint","resource","indexOf","bucket","key","Key","slashIndex","copy","prefix","substr","isValidAccelerateOperation","invalidOperations","s3UsEast1RegionalEndpoint","env","sharedConfig","clientConfig","hostname","insertPoint","regionalEndpoint","substring","updateEndpoint","b","pathStyleBucketName","useAccelerateEndpoint","useDualstackEndpoint","port","host","virtualHostedBucket","removeVirtualHostedBucketFromPath","path","encodedS3Key","uriEscapePath","replace","RegExp","accessPointArn","isOutpostArn","isObjectLambdaArn","outpostsSuffix","outpostId","serviceName","fipsSuffix","useFipsEndpoint","dualStackSuffix","dnsSuffix","getEndpointSuffix","useArnRegion","s3UseArnRegion","accessPoint","accountId","accesspointName","split","encodedArn","uriEscape","len","headers","isNode","Body","stream","Stream","method","contentType","body","match","charset","replaceFn","_","charsetName","toUpperCase","willComputeChecksums","rules","operations","input","members","needsContentMD5","ContentMD5","Buffer","isBuffer","md5","crypto","keys","each","header","value","bucketName","s3ForcePathStyle","dnsCompatibleBucketName","sslEnabled","resp","httpResponse","toString","data","retryableError","statusCode","_requestRegionForBucket","bucketRegionCache","updateReqBucketRegion","s3Config","newConfig","Host","_asm","currentState","LocationConstraint","clearBucketRegionCache","createBucketConfiguration","CreateBucketConfiguration","extractRequestIds","codes","cachedRegion","XML","Parser","Region","Code","Message","done","reqOperation","reqParams","MaxKeys","regionReq","send","getRegionReq","listObjects","buckets","Object","i","requestRegion","extendedRequestId","cfId","requestId","getSignedUrl","callback","expires","Expires","makeRequest","defer","presign","createPresignedPost","undefined","boundParams","self","pathname","finalizePost","url","urlFormat","fields","preparePostFields","credentials","Fields","Conditions","getCredentials","err","conditions","expiresInSeconds","now","getSkewCorrectedDate","slice","signingDate","date","iso8601","shortDate","scope","createScope","credential","accessKeyId","sessionToken","field","hasOwnProperty","condition","Policy","preparePostPolicy","Date","valueOf","hmac","getSigningKey","expiration","base64","encode","JSON","stringify","noPresignedContentLength","ContentLength","createBucket","copiedParams","globalEndpoint","writeGetObjectResponse","Endpoint","upload","options","merge","uploader","ManagedUpload","addPromisesToClass","PromiseDependency","getSignedUrlPromise","promisifyMethod","deletePromisesFromClass","addPromises"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\nvar s3util = require('./s3util');\nvar regionUtil = require('../region_config');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\n * @api private\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\n * @api private\n */\n var regionRedirectErrorCodes = [\n  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n  'BadRequest', // head operations on virtual-hosted global bucket endpoints\n  'PermanentRedirect', // non-head operations on path-style or regional endpoints\n  301 // head operations on path-style or regional endpoints\n ];\n\nvar OBJECT_LAMBDA_SERVICE = 's3-object-lambda';\n\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) If not using presigned urls, default to V4\n        b) If using presigned urls, default to lowest version the region supports\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSigningName: function getSigningName(req) {\n    if (req && req.operation === 'writeGetObjectResponse') {\n      return OBJECT_LAMBDA_SERVICE;\n    }\n\n    var _super = AWS.Service.prototype.getSigningName;\n    return (req && req._parsedArn && req._parsedArn.service)\n      ? req._parsedArn.service\n      : _super.call(this);\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' +\n                    '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(),\n        {name: 'InvalidEndpoint', message: msg});\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4\n        && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n\n    request.removeListener('validate',\n      AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', this.extractErrorFrom200Response);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (this.shouldDisableBodySigning(request))  {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n    //deal with ARNs supplied to Bucket\n    if (request.operation !== 'createBucket' && s3util.isArnInParam(request, 'Bucket')) {\n      // avoid duplicate parsing in the future\n      request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);\n\n      request.removeListener('validate', this.validateBucketName);\n      request.removeListener('build', this.populateURI);\n      if (request._parsedArn.service === 's3') {\n        request.addListener('validate', s3util.validateS3AccessPointArn);\n        request.addListener('validate', this.validateArnResourceType);\n        request.addListener('validate', this.validateArnRegion);\n      } else if (request._parsedArn.service === 's3-outposts') {\n        request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n        request.addListener('validate', s3util.validateOutpostsArn);\n        request.addListener('validate', s3util.validateArnRegion);\n      }\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateUriFromAccessPointArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n      return;\n    }\n    //listeners regarding region inference\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function(req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +\n        'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function(req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n   validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, { allowFipsEndpoint: true });\n  },\n\n  /**\n   * Validate resource-type supplied in S3 ARN\n   */\n  validateArnResourceType: function validateArnResourceType(req) {\n    var resource = req._parsedArn.resource;\n\n    if (\n      resource.indexOf('accesspoint:') !== 0 &&\n      resource.indexOf('accesspoint/') !== 0\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(),\n          { code: 'InvalidBucket', message: msg });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = [\n      'createBucket',\n      'deleteBucket',\n      'listBuckets'\n    ];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\n   * 's3.us-east-1.amazonaws.com'.\n   * @api private\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n    if (\n      !(service._originalConfig || {}).endpoint &&\n      req.httpRequest.region === 'us-east-1' &&\n      config.s3UsEast1RegionalEndpoint === 'regional' &&\n      req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0\n    ) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      regionalEndpoint = config.endpoint.substring(0, insertPoint) +\n        '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstackEndpoint) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname =\n            b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' +\n            endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * When user supply an access point ARN in the Bucket parameter, we need to\n   * populate the URI according to the ARN.\n   */\n  populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {\n    var accessPointArn = req._parsedArn;\n\n    var isOutpostArn = accessPointArn.service === 's3-outposts';\n    var isObjectLambdaArn = accessPointArn.service === 's3-object-lambda';\n\n    var outpostsSuffix = isOutpostArn ? '.' + accessPointArn.outpostId: '';\n    var serviceName = isOutpostArn ? 's3-outposts': 's3-accesspoint';\n    var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? '-fips': '';\n    var dualStackSuffix = !isOutpostArn &&\n      req.service.config.useDualstackEndpoint ? '.dualstack' : '';\n\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n\n    endpoint.hostname = [\n      accessPointArn.accessPoint + '-' + accessPointArn.accountId + outpostsSuffix,\n      serviceName + fipsSuffix + dualStackSuffix,\n      useArnRegion ? accessPointArn.region : req.service.config.region,\n      dnsSuffix\n    ].join('.');\n\n    if (isObjectLambdaArn) {\n      // should be in the format: \"accesspoint/${accesspointName}\"\n      var serviceName = 's3-object-lambda';\n      var accesspointName = accessPointArn.resource.split('/')[1];\n      var fipsSuffix = req.service.config.useFipsEndpoint ? '-fips': '';\n      endpoint.hostname = [\n        accesspointName + '-' + accessPointArn.accountId,\n        serviceName + fipsSuffix,\n        useArnRegion ? accessPointArn.region : req.service.config.region,\n        dnsSuffix\n      ].join('.');\n    }\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path;\n    //remove the Bucket value from path\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function(_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] =\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request if it's not\n   * already set by {AWS.EventListeners.Core.COMPUTE_CHECKSUM}. It depends on\n   * whether {AWS.Config.computeChecksums} is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    var rules = req.service.api.operations[req.operation].input.members;\n    var body = req.httpRequest.body;\n    var needsContentMD5 = rules.ContentMD5 &&\n      !req.params.ContentMD5 &&\n      body &&\n      (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === 'string');\n\n    // Sha256 signing disabled, and not a presigned url\n    if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {\n      return true;\n    }\n\n    // SigV2 and presign, for backwards compatibility purpose.\n    if (needsContentMD5 && this.getSignatureVersion(req) === 's3' && req.isPresigned()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * This listener is to support S3-specific features like\n   * s3DisableBodySigning and SigV2 presign. Content MD5 logic for SigV4 is\n   * handled in AWS.EventListeners.Core.COMPUTE_CHECKSUM\n   *\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function(key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (s3util.dnsCompatibleBucketName(bucketName)) {\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * For COPY operations, some can be error even with status code 200.\n   * SDK treats the response as exception when response body indicates\n   * an exception or body is empty.\n   *\n   * @api private\n   */\n  extractErrorFrom200Response: function extractErrorFrom200Response(resp) {\n    if (!operationsWith200StatusCodeError[resp.request.operation]) return;\n    var httpResponse = resp.httpResponse;\n    if (httpResponse.body && httpResponse.body.toString().match('<Error>')) {\n      // Response body with '<Error>...</Error>' indicates an exception.\n      // Get S3 client object. In ManagedUpload, this.service refers to\n      // S3 client object.\n      resp.data = null;\n      var service = this.service ? this.service : this;\n      service.extractError(resp);\n      throw resp.error;\n    } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\\w_]/)) {\n      // When body is empty or incomplete, S3 might stop the request on detecting client\n      // side aborting the request.\n      resp.data = null;\n      throw AWS.util.error(new Error(), {\n        code: 'InternalError',\n        message: 'S3 aborted request'\n      });\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] &&\n        error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket &&\n        request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error &&\n        regionRedirectErrorCodes.indexOf(error.code) != -1 &&\n        error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n\n    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n          if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n            req.service.bucketRegionCache[bucket] = region;\n          }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' ||\n        (AWS.util.isNode() && req.operation === 'headBucket') ||\n        (error.statusCode === 400 && req.operation !== 'headObject') ||\n        regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {Bucket: bucket};\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function() {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n   /**\n   * For browser only. If NetworkingError received, will attempt to obtain\n   * the bucket region.\n   *\n   * @api private\n   */\n   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket ||\n        request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!s3util.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n\n      getRegionReq.send(function() {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n   },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n   bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n   clearBucketRegionCache: function(buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n   },\n\n   /**\n    * Corrects request region if bucket's cached region is different\n    *\n    * @api private\n    */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(),\n        { code: 'InvalidParameterException', message: 'The expiration must be a number, received ' + typeof expires });\n    }\n\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * @!method  getSignedUrlPromise()\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\n   *   for a given operation name.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @note Not all operation parameters are supported when using pre-signed\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *      request. If you are using pre-signed URLs to upload from a browser and\n   *      need to use these fields, see {createPresignedPost}.\n   *   @param operation [String] the name of the operation to call\n   *   @param params [map] parameters to pass to the operation. See the given\n   *      operation for the expected operation parameters. In addition, you can\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *      work for.\n   *   @option params Expires [Integer] (900) the number of seconds to expire\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\n   *   @callback fulfilledCallback function(url)\n   *     Called if the promise is fulfilled.\n   *     @param url [String] the signed url\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Pre-signing a getObject operation\n   *      var params = {Bucket: 'bucket', Key: 'key'};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Pre-signing a putObject operation with a specific payload\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   */\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(\n          config.credentials,\n          config.region,\n          bucket,\n          params.Fields,\n          params.Conditions,\n          params.Expires\n        )\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          try {\n            callback(null, finalizePost());\n          } catch (err) {\n            callback(err);\n          }\n        }\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(\n    credentials,\n    region,\n    bucket,\n    fields,\n    conditions,\n    expiresInSeconds\n  ) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,'\n        + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(\n      new Date(now.valueOf() + expiresInSeconds * 1000),\n      conditions\n    );\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(\n      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),\n      fields.Policy,\n      'hex'\n    );\n\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'});\n    }\n  },\n\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    // copy params so that appending keys does not unintentioinallly\n    // mutate params object argument passed in by user\n    var copiedParams = AWS.util.copy(params);\n\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      copiedParams.CreateBucketConfiguration = { LocationConstraint: this.config.region };\n    }\n    return this.makeRequest('createBucket', copiedParams, callback);\n  },\n\n  writeGetObjectResponse: function writeGetObjectResponse(params, callback) {\n\n    var request = this.makeRequest('writeGetObjectResponse', AWS.util.copy(params), callback);\n    var hostname = this.endpoint.hostname;\n    if (hostname.indexOf(this.config.region) !== -1) {\n      // hostname specifies a region already\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.');\n    } else {\n      // Hostname doesn't have a region.\n      // Object Lambda requires an explicit region.\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.' + this.config.region + '.');\n    }\n\n    request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);\n    return request;\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {service: this, params: params});\n\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n\n/**\n * @api private\n */\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\n\nAWS.util.addPromises(AWS.S3);\n"]},"metadata":{},"sourceType":"script"}